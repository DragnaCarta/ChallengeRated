import React, { useState} from 'react';
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'

import Banner from '@/components/Banner/Banner'
import ButtonGrid from '@/components/ButtonGrid/ButtonGrid';
import ButtonToggle from '@/components/ButtonToggle/ButtonToggle';
import Card from '@/components/Card/Card'
import CardTitle from '@/components/CardTitle/CardTitle';
import ChallengeRatingOptions from '@/lib/ChallengeRatingOptions';
import CreatureToggleOptions from '@/lib/CreatureToggleOptions';
import Container from '@/components/Container/Container';
import EncounterCalculator from '@/lib/EncounterCalculator';
import RadioGrid from '@/components/RadioGrid/RadioGrid';
import PartyLevelOptions from '@/lib/PartyLevelOptions';
import PartySizeOptions from '@/lib/PartySizeOptions';

const inter = Inter({ subsets: ['latin'] });
const _encounterCalculator = new EncounterCalculator();

export default function Home() {
  const [partySize, setPartySize] = useState(1);
  const [partyAverageLevel, setPartyAverageLevel] = useState(1);
  const [creatureToggle, setCreatureToggle] = useState(0);
  const [enemies, setEnemies] = useState<number[]>([]);
  const [allies, setAllies] = useState<number[]>([]);

  //
  const enemyCrOccurrences = enemies.reduce(function (acc: Record<number, number>, curr) {
    return acc[curr] ? ++acc[curr] : acc[curr] = 1, acc
  }, {});

  const allyCrOccurrences = allies.reduce(function (acc: Record<number, number>, curr) {
      return acc[curr] ? ++acc[curr] : acc[curr] = 1, acc
  }, {});


  //
  const { hpLost, resourcesSpent, encounterDifficulty } = _encounterCalculator.recalculateDifficulty(partySize, partyAverageLevel, enemies, allies);

  function addCreature(challengeRating: number) {
    if (creatureToggle === 0) {
      setEnemies([...enemies, challengeRating]);
    } else {
      setAllies([...allies, challengeRating]);
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <Banner />

        {/* Card 1 - Build Your Party */}
        <Container>
          <Card>
            <CardTitle>Build Your Party</CardTitle>
            <div style={{ margin: '1rem' }}>
              <RadioGrid 
                label="Select the number of players in your party."
                options={PartySizeOptions}
                onChange={(value) => setPartySize(value)}
                selectedValue={partySize}
              />
            </div>
            <div style={{ margin: '1rem' }}>
              <RadioGrid 
                label="Select your party's average level."
                options={PartyLevelOptions}
                onChange={(value) => setPartyAverageLevel(value)}
                selectedValue={partyAverageLevel}
              />
            </div>
          </Card>

        {/* Card 2 - Build Your Encounter */}
        <Card>
        <CardTitle>Build Your Encounter</CardTitle>
        <div style={{ margin: '1rem' }}>
            <ButtonToggle 
              label="Are you adding allies or enemies?"
              options={CreatureToggleOptions}
              selectedValue={creatureToggle}
              onClick={(value: number) => setCreatureToggle(value)}
            />
          </div>
          <div style={{ margin: '1rem' }}>
            <ButtonGrid 
              label="Add creatures that will fight in this encounter by selecting their Challenge Ratings."
              options={ChallengeRatingOptions}
              onClick={(value: number) => addCreature(value)}
              mode={creatureToggle === 0 ? 'red' : 'blue'}
            />
          </div>
        </Card>

        {/* Card 3 - Encounter Summary */}
        <Card>
          <CardTitle>Encounter Summary</CardTitle>
          <div style={{ display: 'flex', flexDirection: 'row'}}>

          <div style={{ width: '50%'}}>
            <div style={{ margin: '1rem' }}>
              <p style={{ fontWeight: '700'}}>{encounterDifficulty}</p>
            </div>
            <div style={{ margin: '1rem' }}>
              <p style={{ fontWeight: '700'}}>HP Loss</p>
              <p><DynamicText>{Math.round(hpLost)}</DynamicText></p>
            </div>
            <div style={{ margin: '1rem' }}>
              <p style={{ fontWeight: '700'}}>Resources Spent</p>
              <p><DynamicText>{Math.round(resourcesSpent)}</DynamicText></p>
            </div>
          </div>
            
            {/* Left */}
            <div style={{ width: '50%'}}>
              <div style={{ margin: '1rem' }}>
                <p style={{ fontWeight: '700'}}>Party:</p>
                <p><DynamicText>{partySize}</DynamicText> PCs at Level <DynamicText>{partyAverageLevel}</DynamicText></p>
              </div>
              <div style={{ margin: '1rem' }}>
                <p style={{ fontWeight: '700'}}>Enemies:</p>
                <ul>
                  {Object.keys(enemyCrOccurrences).map((crString, i) => {
                    const cr = parseFloat(crString);
                    const crCount = enemyCrOccurrences[cr];
                    return (
                      <li key={i}>{cr} x {crCount}</li>
                    )}
                  )}
                </ul>
                <p style={{ fontWeight: '700'}}>Allies:</p>
                <ul>
                  {Object.keys(allyCrOccurrences).map((crString, i) => {
                    const cr = parseFloat(crString);
                    const crCount = allyCrOccurrences[cr];
                    return (
                      <li key={i}>{cr} x {crCount}</li>
                    )}
                  )}
                </ul>
              </div>
            </div>

          </div>
        </Card>


        </Container>
      </main>
    </>
  )
}

type DynamicTextProps = {
  children: React.ReactNode;
}

function DynamicText({children}: DynamicTextProps) {
  return (
    <span style={{ color: 'red' }}>
      {children}
    </span>
  )
}
